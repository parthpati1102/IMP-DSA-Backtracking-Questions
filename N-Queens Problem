class Solution {
public:
    bool isSafe(vector<string> &board , int row , int col , int n){
        //check horizental
        for(int j = 0 ; j < n ; j++){
            if(board[row][j] == 'Q'){
                return false;
            }
        }

        //check vertical
        for(int i = 0 ; i < n ; i++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }

        //left diagonal
        for(int i = row - 1 , j = col - 1 ; i >= 0 && j >= 0 ; i-- , j--){
              if(board[i][j] == 'Q'){
                  return false;
              }
        }

        //right diagonal
        for(int i = row - 1 , j = col + 1 ; i >= 0 && j < n ; i-- , j++){
            if(board[i][j] == 'Q'){
                return false;
            }
        }

        return true;
    }
    void checkNQueen(vector<string> &board , vector<vector<string>> &ans , int n , int row){
        if(row >= n){
            ans.push_back(board);
            return;
        }

        for(int j = 0 ; j < n ; j++){
            if(isSafe(board , row , j , n)){
                board[row][j] = 'Q';
                checkNQueen(board , ans , n , row + 1);
                board[row][j] = '.';
            }
        }

    }
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n , string(n , '.'));
        vector<vector<string>> ans;

        checkNQueen(board , ans , n , 0);

        return ans;
    }
};
