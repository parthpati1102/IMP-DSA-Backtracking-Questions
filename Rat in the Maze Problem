class Solution {
  public:
  
  bool check(int ir , int ic , int fr , int fc , vector<vector<int>> &maze , vector<vector<bool>> &track){
      if((ir >= 0 && ir < fr) && (ic >= 0 && ic < fc) && (maze[ir][ic] == 1)  && (track[ir][ic] == false)){
          return true;
      }
      
      return false;
  }
   void solve(int ir , int ic , int fr , int fc , string &path , vector<string> &allPaths , vector<vector<int>>& maze , vector<vector<bool>> &track){
       if(ir == fr - 1 && ic == fc - 1){
           allPaths.push_back(path);
           return;
       }
       
       track[ir][ic] = true;
       
       
         
       //Down
       if(check(ir + 1 , ic , fr , fc , maze , track)){
           path.push_back('D');
           solve(ir + 1 , ic , fr , fc , path , allPaths , maze , track);
           
           path.pop_back();
       }
       
       
       
       //Left
       if(check(ir , ic - 1, fr , fc , maze , track)){
           path.push_back('L');
           solve(ir , ic - 1 , fr , fc , path , allPaths , maze , track);
           
           path.pop_back();
       }
       
       //Right
       if(check(ir , ic + 1 , fr , fc , maze , track)){
           path.push_back('R');
           solve(ir , ic + 1 , fr , fc , path , allPaths , maze , track);
           
           path.pop_back();
       }
       
       //Up;
       if(check(ir - 1 , ic , fr , fc , maze , track)){
           path.push_back('U');
           solve(ir - 1 , ic , fr , fc , path , allPaths , maze , track);
           
           path.pop_back();
       }
       
       
       
       track[ir][ic] = false;
       
   }
    vector<string> ratInMaze(vector<vector<int>>& maze) {
        // code here
        string path = "";
        vector<string> allPaths;
        

        int fr = maze.size();
        int fc = maze[0].size();
        
        vector<vector<bool>> track(fr , vector<bool> (fc , false));
        
        if(maze[0][0] == 0 || maze[fr - 1][fc - 1] == 0){
            return {};
        }
        
        solve(0 , 0 , fr , fc , path , allPaths , maze , track);
        
        return allPaths;
    }
};
